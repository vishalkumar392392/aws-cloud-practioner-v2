AWSTemplateFormatVersion: "2010-09-09"
Description: Spring Boot App with ALB and Auto Scaling Group (2â€“4 EC2 instances with CPU-based scaling)

Resources:
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH, HTTP, HTTPS, MySQL, and custom ports
      VpcId: vpc-0481382a2919cabc9
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to Load Balancer
      VpcId: vpc-0481382a2919cabc9
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MySpringBootALB
      Subnets:
        - subnet-050cfb6d7966c030c
        - subnet-0252389a16e6033e0
        - subnet-01572867f987c92be
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: SpringBootTG
      Port: 80
      Protocol: HTTP
      VpcId: vpc-0481382a2919cabc9
      TargetType: instance
      HealthCheckPath: /students
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: SpringBootLT
      LaunchTemplateData:
        ImageId: ami-0c101f26f147fa7fd # Amazon Linux 2023 (us-east-1)
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref MySecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install java-17-amazon-corretto -y
            sudo yum remove maven -y
            sudo yum install maven -y
            sudo yum install git -y
            dnf update -y
            dnf install -y wget
            git clone https://github.com/vishalkumar392392/aws-cloud-practioner-v2.git
            cd aws-cloud-practioner-v2/
            mvn clean package -Dmaven.test.skip=true
            cd target/
            java -jar *.jar --spring.datasource.url=jdbc:mysql://52.91.112.119:3306/school

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - subnet-050cfb6d7966c030c
        - subnet-0252389a16e6033e0
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref MyTargetGroup
      MetricsCollection:
        - Granularity: "1Minute"
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300

  MyScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0
        DisableScaleIn: false

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the Load Balancer
    Value: !GetAtt MyLoadBalancer.DNSName
